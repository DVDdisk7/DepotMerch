@page "/product/{Id}"
@using DepotMerch.Data.Products
@using DepotMerch.Data.Orders
@using DepotMerch.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager

<section class="py-5">
            <div class="container px-4 px-lg-5 my-5">
                <div class="row gx-4 gx-lg-5 align-items-center">
                    @if (product.ImageUrl != null && product.ImageUrl != "")
                    {
                        <div class="col-md-6"><img class="card-img-top mb-5 mb-md-0" src="@product.ImageUrl" alt="..." /></div>
                    }
                    else
                    {
                        <div class="col-md-6"><img class="card-img-top mb-5 mb-md-0" src="https://dummyimage.com/600x700/dee2e6/6c757d.jpg" alt="..." /></div>
                    }
                    <div class="col-md-6">
                        <!--<div class="small mb-1">SKU: BST-498</div>-->
                        <h1 class="display-5 fw-bolder">@product.Name</h1>
                        <div class="fs-5 mb-5">
                            <span>€@product.Price</span>
                        </div>
                        <p class="lead">@product.Description</p>
                        <div class="d-flex">
                            <input class="form-control text-center me-3" id="inputQuantity" type="number" value="1" style="max-width: 3rem" />
                            <button class="btn btn-outline-dark flex-shrink-0" type="button">
                                <i class="bi-cart-fill me-1"></i>
                                Voeg toe aan winkelwagen
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </section>

@code {
    [Parameter]
    public string Id { get; set; }
    Product product = new Product();
    protected override async Task OnInitializedAsync()
    {
        product = await Http.GetFromJsonAsync<Product>("/api/Product/" + Id);
    }

    /*
    // Use a local stored shopping cart based on the order model to store the products in the shopping cart
    protected async Task AddToCart()
    {
        // Get the shopping cart from the local storage
        var cart = await LocalStorage.GetItem<Order>("cart");
        if (cart == null)
        {
            cart = new Order();
        }
        // Add the product to the shopping cart
        cart.Products.Add(product);
        // Store the shopping cart in the local storage
        await LocalStorage.SetItem("cart", cart);
    } */

}



